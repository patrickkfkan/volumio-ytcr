{
  "_args": [
    [
      "github:patrickkfkan/yt-cast-receiver",
      "/home/patrickkfkan/dev/volumio/ytcr"
    ]
  ],
  "_from": "patrickkfkan/yt-cast-receiver",
  "_id": "yt-cast-receiver@0.1.0-a",
  "_inCache": true,
  "_installable": true,
  "_location": "/yt-cast-receiver",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/patrickkfkan/yt-cast-receiver/master/package.json",
      "gitUrl": "git://github.com/patrickkfkan/yt-cast-receiver.git",
      "httpsUrl": "git+https://github.com/patrickkfkan/yt-cast-receiver.git",
      "shortcut": "github:patrickkfkan/yt-cast-receiver",
      "ssh": "git@github.com:patrickkfkan/yt-cast-receiver.git",
      "sshUrl": "git+ssh://git@github.com/patrickkfkan/yt-cast-receiver.git",
      "type": "github"
    },
    "name": null,
    "raw": "github:patrickkfkan/yt-cast-receiver",
    "rawSpec": "github:patrickkfkan/yt-cast-receiver",
    "scope": null,
    "spec": "github:patrickkfkan/yt-cast-receiver",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/patrickkfkan/yt-cast-receiver.git#d4b962591c2fc119787a685db2bd56f84a462340",
  "_shasum": "e14ea1f190cd3a0114670b39f9d0b17106668121",
  "_shrinkwrap": null,
  "_spec": "github:patrickkfkan/yt-cast-receiver",
  "_where": "/home/patrickkfkan/dev/volumio/ytcr",
  "author": {
    "name": "Patrick Kan"
  },
  "bugs": {
    "url": "https://github.com/patrickkfkan/yt-cast-receiver/issues"
  },
  "dependencies": {
    "abort-controller": "^3.0.0",
    "async-task-queue": "^1.0.1",
    "express": "^4.17.1",
    "line-by-line": "^0.1.6",
    "newline-remove": "^1.0.2",
    "node-fetch": "^2.6.1",
    "peer-dial": "github:patrickkfkan/peer-dial",
    "query-string": "^7.0.0",
    "timer-node": "^4.1.0",
    "uuid": "^8.3.2",
    "yt-mix-playlist": "^0.1.1-b",
    "ytdl-core": "^4.5.0"
  },
  "description": "YouTube Cast Receiver for Node",
  "devDependencies": {},
  "gitHead": "d4b962591c2fc119787a685db2bd56f84a462340",
  "homepage": "https://github.com/patrickkfkan/yt-cast-receiver#readme",
  "keywords": [
    "cast",
    "chromecast",
    "dial",
    "youtube"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "yt-cast-receiver",
  "optionalDependencies": {},
  "readme": "# yt-cast-receiver\n\nA YouTube Cast Receiver for Node.\n\nWhen your start the receiver, your device becomes discoverable and can be selected through the Cast button in the YouTube mobile app or website. When connected, the app or website acts as a remote control and issues commands to the receiver for controlling playback of videos (like Chromecast).\n\n>Not all browsers support casting from the YouTube website. This module has been tested to work with the Chrome and Edge desktop browsers.\n\nThe receiver itself does not include a player. It is intended to be integrated into your application where you implement the player yourself. When the receiver receives a playback command from the YouTube mobile app or website (such as play, pause and seek), it will pass this command to your player. It is up to you to decide how you would handle these commands.\n\nThis project uses a [forked version](https://github.com/patrickkfkan/peer-dial) of [peer-dial](https://github.com/fraunhoferfokus/peer-dial) for DIAL server implementation and is heavily based on [TubeCast](https://github.com/enen92/script.tubecast).\n\n# Installation\n\n```\nnpm i yt-cast-receiver --save\n```\n\n# Usage\n\n```\nconst ytcr = require('yt-cast-receiver');\n\n// Your player implementation\nconst player = new MyPlayer();\n\n// Create receiver instance with your player\nconst receiver = ytcr.instance(player);\n\n// When a client connects\nreceiver.on('connected', client => {\n    console.log(`Connected to ${client.name}`);\n});\n\n// When client disconnects\nreceiver.on('disconnected', client => {\n    console.log(`Disconnected from ${client.name}`);\n});\n\n// Start the receiver\nreceiver.start();\n\n// Your player implementation extends the Player class\nclass MyPlayer extends ytcr.Player {\n\n    async play(videoId, position) {\n        ...\n        this.notifyPlayed();\n    }\n\n    async resume() {\n        ...\n        this.notifyResumed();\n    }\n    ...\n}\n```\n\n# API\n\n### `instance(player, options)`\n\nCreates a receiver instance.\n\n- `player`: Your player implementation\n- `options`:\n    - port: port on which to accept client requests (default: 3000)\n    - corsAllowOrigins: `true` or `false` (default: `false` - no origin allowed)\n    - prefix: access path (default: '/ytcr')\n    - bindToInterfaces: Array<String> (default: `undefined` - bind to all network interfaces)\n    - bindToAddresses: Array<String> (default: `undefined` - bind to all network addresses)\n    - screenName\n    - screenApp\n    - defaultAutoplay: `true` or `false`. On connected, whether to enable autoplay if supported (default: `true`)\n    - autoplayLoader: specify your own loader to retrieve the next video Id for autoplay\n    - debug: `true` or `false`. Whether to output debug messages (default: `false`)\n\n### `start()`\n\nStarts the receiver.\n\n### `stop()`\n\nStops the receiver.\n\n### `on(event, listener)`\n\nFires `listener` on `event`.\n\n| Event         | Description            | Data passed to `listener`  |\n|---------------|------------------------|----------------------------|\n|`started`      | Receiver is started    |                            |\n|`stopped`      | Receiver is stopped    |                            |\n|`connected`    | Client is connected    | Client info                |\n|`disconnected` | Client is disconnected | Client info                |\n\n### `off(event, listener)`\n\nDetaches `listener` from `event`.\n\n### `setDefaultAutoPlay(value)`\n\nSets the `defaultAutoplay` option at runtime.\n\n### `setAutoplayLoader(loader)`\n\nSets the `autoplayLoader` option at runtime.\n\n### `setDebug(value)`\n\nSets the `debug` option at runtime.\n\n# Player\n\nRefer to the [FakePlayer](example/fake-player.js) example, which uses a timer to simulate playback.\n\nTo begin with, create your player class by extending `ytcr.Player`:\n\n```\nconst ytcr = require('yt-cast-receiver');\n\nclass MyPlayer extends ytcr.Player {\n    ...\n}\n```\n\nThen override the following functions:\n\n```\n// Play videoId starting at position\nasync play(videoId, position) {\n    ...\n    // When playback started\n    await this.notifyPlayed();\n}\n\n// Resume paused playback\nasync resume() {\n    ...\n    // When playback resumed\n    await this.notifyResumed();\n}\n\n// Pause playback\nasync pause() {\n    ...\n    // When playback paused\n    await this.notifyPaused();\n}\n\n// Stop playback\nasync stop() {\n    ...\n    // When playback stopped\n    await this.notifyStopped();\n}\n\n// Seek to position\nasync seek(position, statusBeforeSeek) {\n    ...\n    // After seeking\n    await this.notifySeeked(statusBeforeSeek);\n}\n\n// Set volume\nasync setVolume(volume) {\n    ...\n    // After setting volume\n    await this.notifyVolumeChanged();\n}\n\n// Get current volume\nasync getVolume() {\n    ...\n}\n\n// Get current playback position\nasync getPosition() {\n    ...\n}\n\n// Get duration of current playback\nasync getDuration() {\n    ...\n}\n```\n\nThe `notify...` functions tell the receiver that it should update the client status following a change in the player state.\n\n***Playing the next video***\nIt is the player's responsibility to tell the receiver to move on to the next video in the queue when the current video has finished playing:\n\n```\n...\n// When current video has finished playing\nawait this.requestPlayNext();\n\n```\nThe receiver will then tell the player to play the next video in the queue or, if there isn't any, the 'up next' video if autoplay is enabled.\n\n> You can also tell the receiver to play the previous video in the list by calling `this.requestPlayPrevious()`\n\n# Autoplay Loader\n\nThe default autoplay loader retrieves the 'up next' video Id through the following sources:\n\n1. Mixes\n2. Related videos, if mixes are not available\n\nYou can provide your own loader with the `autoplayLoader` option in `instance()` or call `setAutoplayLoader(loader)`. When implementing your own loader, you must provide the following function:\n\n**`async function getUpNextVideoId(videoId, currentVideoIds)`**\n- `videoId`: the video Id for which the 'up next' video Id is to be returned.\n- `currentVideoIds`: an array of video Ids currently in the playlist / queue. Your implementation must ensure that the 'up next' video Id it returns is **not** among those in this list.\n\n\n# Notes\n\n- This module is work-in-progress and may not be reliable enough for production use\n- The YouTube website is less featured than the YouTube mobile app as far as casting is concerned:\n    - Autoplay is not supported\n    - The receiver is not notified when videos are added to the queue. Hence, they will not be played even though they appear in the queue on the website.\n\n# Changelog\n\n0.1.0a\n- Initial release",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/patrickkfkan/yt-cast-receiver.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.0-a"
}
