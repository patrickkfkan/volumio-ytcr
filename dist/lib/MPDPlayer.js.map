{"version":3,"file":"MPDPlayer.js","sourceRoot":"","sources":["../../src/lib/MPDPlayer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants, Player, PlayerState, Video } from 'yt-cast-receiver';\nimport mpdApi, { MPDApi } from 'mpd-api';\nimport { MPD } from 'mpd2';\nimport AbortController from 'abort-controller';\nimport MPDSubsystemEventEmitter, { SubsystemEvent, SubsystemName } from './MPDSubsystemEventEmitter.js';\nimport VolumeControl from './VolumeControl.js';\nimport VideoLoader, { VideoInfo } from './VideoLoader.js';\nimport ytcr from './YTCRContext.js';\n\nexport interface MPDPlayerError {\n  message: string;\n}\n\nexport interface ActionEvent {\n  name: 'play' | 'pause' | 'resume' | 'stop' | 'seek' | 'setVolume';\n  data?: Record<string, any>\n}\n\nexport interface MPDPlayerConfig {\n  mpd: MPD.Config;\n  volumeControl: VolumeControl;\n  videoLoader: VideoLoader;\n}\n\ninterface CurrentVideoInfo extends VideoInfo {\n  mpdSongId?: string,\n}\n\nexport interface VolumioState {\n  service: string,\n  status: 'play' | 'pause' | 'stop';\n  title?: string;\n  artist?: string;\n  album?: string;\n  albumart: string;\n  uri: string;\n  trackType: string;\n  seek: number;\n  duration: number;\n  samplerate?: string;\n  bitdepth?: string;\n  bitrate?: string;\n  channels?: number;\n  volume: number;\n  isStreaming?: boolean;\n}\n\nexport default class MPDPlayer extends Player {\n\n  #config: MPDPlayerConfig;\n  #currentVideoInfo: CurrentVideoInfo | null;\n  #mpdClient: MPDApi.ClientAPI | null;\n  #volumeControl: VolumeControl;\n  #videoLoader: VideoLoader;\n  #loadVideoAbortController: AbortController | null;\n\n  #subsystemEventEmitter: MPDSubsystemEventEmitter | null;\n  #destroyed: boolean;\n  #asleep: boolean;\n\n  constructor(config: MPDPlayerConfig) {\n    super();\n    this.#config = config;\n  }\n\n  // Must be called after receiver started, not before.\n  async init() {\n    this.#currentVideoInfo = null;\n    this.#mpdClient = await mpdApi.connect(this.#config.mpd);\n\n    this.#destroyed = false;\n    this.#videoLoader = this.#config.videoLoader;\n    this.#volumeControl = this.#config.volumeControl;\n\n    const externalMPDEventListener = this.#handleExternalMPDEvent.bind(this);\n    this.#subsystemEventEmitter = MPDSubsystemEventEmitter.instance(this.#mpdClient, this.logger);\n    this.#subsystemEventEmitter.on('player', externalMPDEventListener);\n    this.#subsystemEventEmitter.on('mixer', externalMPDEventListener);\n    this.#subsystemEventEmitter.enable();\n  }\n\n  #abortLoadVideo() {\n    if (this.#loadVideoAbortController) {\n      this.#loadVideoAbortController.abort();\n      this.#loadVideoAbortController = null;\n    }\n  }\n\n  protected async doPlay(video: Video, position: number): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient) {\n      return false;\n    }\n\n    this.emit('action', { name: 'play', data: { videoId: video.id, position } });\n    this.logger.debug(`[ytcr] MPDPlayer: play ${video.id} at position ${position}s`);\n\n    this.#abortLoadVideo();\n    this.#loadVideoAbortController = new AbortController();\n    let videoInfo;\n    try {\n      videoInfo = await this.#videoLoader.getInfo(video, this.#loadVideoAbortController.signal) as CurrentVideoInfo;\n    }\n    catch (error: any) {\n      if (error.name === 'AbortError') {\n        this.logger.debug('[ytcr] AbortError:', error);\n        return false;\n      }\n      throw error;\n    }\n    finally {\n      this.#loadVideoAbortController = null;\n    }\n    this.logger.debug(`[ytcr] MPDPLayer obtained info for ${video.id}:`, videoInfo);\n\n    await this.#mpdClient.api.queue.clear();\n\n    if (videoInfo?.streamUrl) {\n      const songId = (await this.#mpdClient.api.queue.addid(videoInfo.streamUrl)).toString();\n      videoInfo.mpdSongId = songId;\n      if (videoInfo.title) {\n        await this.#mpdClient.api.queue.addtagid(songId, 'title', videoInfo.title);\n      }\n      if (videoInfo.channel) {\n        await this.#mpdClient.api.queue.addtagid(songId, 'album', videoInfo.channel);\n      }\n      await this.#mpdClient.api.queue.addtagid(songId, 'artist', 'YouTube Cast');\n      await this.#mpdClient.api.playback.consume('1');\n      await this.#mpdClient.api.playback.seekid(songId, position.toString());\n\n      this.wake();\n\n\n      const resolved = await this.resolveOnMPDStatusChanged(\n        this.#mpdClient.api.playback.playid.bind(this, songId), 'player',\n        { state: 'play', songid: videoInfo.mpdSongId }\n      );\n\n      if (resolved) { // Playback successful\n        this.#currentVideoInfo = videoInfo;\n      }\n\n      return resolved;\n\n      /*       Return this.resolveOnMPDStatusChanged(\n                this.#mpdClient.api.playback.playid.bind(this, songId), 'player',\n                { state: 'play', songid: videoInfo.mpdSongId }\n              )\n                .then(async (mpdStatus) => {\n                  this.#currentVideoInfo = videoInfo;\n                  await this.notifyVolumeChanged();\n                  await this.notifyPlayed();\n                  return mpdStatus;\n                })\n                .then(mpdStatus => this.getState(mpdStatus))\n                .then(playerState => this.eventEmitter.emit('stateChanged', playerState, { triggeredBy: 'play' }))*/\n    }\n\n    this.logger.debug(`[ytcr] MPDPlayer failed to play ${video.id}: ${videoInfo.errMsg}`);\n    this.emit('error', {\n      message: ytcr.getI18n('YTCR_START_PLAYBACK_FAILED', videoInfo.title || videoInfo.id, videoInfo.errMsg)\n    } as MPDPlayerError);\n\n    // Check if video was in fact loaded (just that it's unplayable) - this affects whether we're going to play next.\n    if (videoInfo?.title) {\n      this.logger.debug('[ytcr] Video unplayable; proceeding to next in queue...');\n      return this.next();\n    }\n\n    return false;\n  }\n\n  protected async doPause(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    this.emit('action', { name: 'pause' });\n\n    this.logger.debug('[ytcr] MPDPlayer: pause');\n\n    return this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.pause.bind(this), 'player',\n      { state: 'pause', songid: this.#currentVideoInfo.mpdSongId }\n    );\n  }\n\n  protected async doResume(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    this.emit('action', { name: 'resume' });\n\n    this.logger.debug('[ytcr] MPDPlayer: resume');\n\n    return this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.resume.bind(this), 'player',\n      { state: 'play', songid: this.#currentVideoInfo.mpdSongId }\n    );\n  }\n\n  protected async doStop(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient) {\n      return true;\n    }\n\n    if (this.status === Constants.PLAYER_STATUSES.LOADING) {\n      this.#abortLoadVideo();\n      return true;\n    }\n\n    this.emit('action', { name: 'stop' });\n\n    this.logger.debug('[ytcr] MPDPlayer: stop');\n\n    const resolved = await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.stop.bind(this), 'player',\n      { state: 'stop' }\n    );\n\n    if (resolved) { // Stopped\n      this.#currentVideoInfo = null;\n    }\n\n    return resolved;\n  }\n\n  protected async doSeek(position: number): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    // Seeking not supported for livestreams\n    if (this.#currentVideoInfo.isLive) {\n      this.logger.debug('[ytcr] MPDPlayer playing livestream; seek request ignored.');\n      return false;\n    }\n\n    this.emit('action', { name: 'seek', data: { position } });\n\n    this.logger.debug(`[ytcr] MPDPlayer: seek to ${position}s`);\n\n    return await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.seekcur.bind(this, position.toString()), 'player',\n      { songid: this.#currentVideoInfo.mpdSongId }\n    );\n  }\n\n  protected async doSetVolume(volume: number): Promise<boolean> {\n    if (this.#asleep || this.#destroyed) {\n      return false;\n    }\n\n    this.emit('action', { name: 'setVolume', data: { volume } });\n\n    if (this.#asleep || this.#destroyed) {\n      return false;\n    }\n\n    this.logger.debug(`[ytcr] MPDPlayer: set volume to ${volume}`);\n    this.#volumeControl.setVolume(volume);\n\n    return true;\n  }\n\n  protected doGetVolume(): Promise<number> {\n    return this.#volumeControl.getVolume();\n  }\n\n  protected async doGetPosition(): Promise<number> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return 0;\n    }\n\n    if (this.#currentVideoInfo?.isLive) {\n      return 600;\n    }\n\n    const mpdStatus: any = await this.#mpdClient.api.status.get();\n    return mpdStatus?.elapsed || 0;\n  }\n\n  protected async doGetDuration(): Promise<number> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return 0;\n    }\n\n    if (this.#currentVideoInfo?.isLive) {\n      return 600;\n    }\n\n    const mpdStatus: any = await this.#mpdClient.api.status.get();\n    return mpdStatus?.time?.total || 0;\n  }\n\n  async destroy() {\n    this.#destroyed = true;\n    this.#subsystemEventEmitter?.disable();\n    await this.stop();\n    await this.#mpdClient?.disconnect();\n    this.removeAllListeners();\n\n    this.#subsystemEventEmitter = null;\n    this.#mpdClient = null;\n    this.#currentVideoInfo = null;\n    this.#asleep = true;\n  }\n\n  sleep() {\n    if (!this.#asleep) {\n      this.logger.debug('[ytcr] MPDPlayer going to sleep...');\n      this.#asleep = true;\n    }\n  }\n\n  wake() {\n    if (this.#asleep) {\n      this.logger.debug('[ytcr] MPDPlayer waking up...');\n      this.#asleep = false;\n    }\n  }\n\n  async #handleExternalMPDEvent(event: SubsystemEvent) {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return;\n    }\n\n    this.logger.debug(`[ytcr] MPDPlayer received external MPD event for subsystem: ${event.name}.`);\n\n    const mpdStatus: any = await this.#mpdClient.api.status.get();\n    this.logger.debug('[ytcr] MPD status for subsystem event:', mpdStatus);\n\n    if (!this.#currentVideoInfo || (this.#currentVideoInfo.mpdSongId !== mpdStatus.songid?.toString() && mpdStatus.state !== 'stop')) {\n      this.logger.debug('[ytcr] MPD subsystem event does not match current song. Putting player to sleep...');\n      this.#currentVideoInfo = null;\n      await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.STOPPED);\n      this.sleep();\n      return;\n    }\n\n    if (event.name === 'mixer') {\n      this.logger.debug('[ytcr] MPD subsystem event indicated volume change. Notifying senders of change...');\n      await this.notifyExternalStateChange();\n      //This.emit('volumeChanged', mpdStatus.volume)\n      return;\n    }\n\n    if (event.name === 'player') {\n      switch (mpdStatus.state) {\n        case 'pause':\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.PAUSED);\n          break;\n        case 'stop':\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.STOPPED);\n          break;\n        default:\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.PLAYING);\n      }\n\n      //Let playerState = await this.getState(mpdStatus);\n      if (mpdStatus.state === 'stop') {\n        // In play(), we set consume on for mpd. If song is no longer in the queue,\n        // That means it has finished playing\n        let songIdInfo;\n        try {\n          if (this.#currentVideoInfo.mpdSongId) {\n            songIdInfo = await this.#mpdClient.api.queue.id(this.#currentVideoInfo.mpdSongId);\n          }\n        }\n        catch (error) {\n          songIdInfo = null;\n        }\n        this.#currentVideoInfo = null;\n        //Let playbackFinished = false;\n        if (!songIdInfo) {\n          this.logger.debug('[ytcr] Current playback finished.');\n          //PlaybackFinished = true;\n          await this.next();\n        }\n        //This.eventEmitter.emit('stateChanged', playerState, { triggeredBy: 'playbackFinished' });\n      }\n      else {\n        //This.eventEmitter.emit('stateChanged', playerState, { triggeredBy: 'external' });\n      }\n    }\n  }\n\n  resolveOnMPDStatusChanged(action: () => Promise<void>, subsystem: SubsystemName, resolveOn: Record<string, string> = {}): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.#subsystemEventEmitter?.prependOnceListener(subsystem,\n        async (event) => {\n          const mpdStatus: any = await this.#mpdClient?.api.status.get();\n          let shouldResolve = true;\n          for (const [ key, value ] of Object.entries(resolveOn)) {\n            if (mpdStatus[key] === undefined || mpdStatus[key].toString() !== value.toString()) {\n              shouldResolve = false;\n              break;\n            }\n          }\n          event.stopPropagation();\n          if (shouldResolve) {\n            this.logger.debug('[ytcr] Condition for resolveOnMPDStatusChanged() satisfied. Resolving Promise...');\n            resolve(true);\n          }\n          else {\n            this.logger.debug('[ytcr] MPD status:', mpdStatus, 'does not match condition:', resolveOn);\n            this.logger.debug('[ytcr] Condition for resolveOnMPDStatusChanged() failed. Rejecting Promise...');\n            resolve(false);\n          }\n        }\n      );\n\n      action();\n    });\n  }\n\n  async getVolumioState(): Promise<VolumioState | null> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return null;\n    }\n\n    const mpdStatus: any = await this.#mpdClient.api.status.get();\n\n    if (!mpdStatus) {\n      return null;\n    }\n\n    const state: VolumioState = {\n      status: mpdStatus.state,\n      service: 'ytcr',\n      album: 'YouTube Cast',\n      albumart: this.#currentVideoInfo?.thumbnail || '/albumart',\n      uri: '',\n      trackType: 'YouTube',\n      seek: Math.round((mpdStatus.elapsed || 0) * 1000),\n      duration: Math.round(mpdStatus.time?.total || 0),\n      volume: mpdStatus.volume || 0\n    };\n\n    const audio = mpdStatus?.audio;\n    if (audio) {\n      if (audio.bits && audio.bits !== 'f') {\n        state.bitdepth = `${audio.bits.toString()} bit`;\n      }\n      if (audio.sample_rate_short) {\n        state.samplerate = `${audio.sample_rate_short.value} ${audio.sample_rate_short.unit}`;\n      }\n    }\n\n    if (this.#currentVideoInfo) {\n      state.title = this.#currentVideoInfo.title;\n      state.artist = this.#currentVideoInfo.channel;\n      if (this.#currentVideoInfo.bitrate) {\n        state.bitrate = this.#currentVideoInfo.bitrate;\n      }\n      if (this.#currentVideoInfo.channels) {\n        state.channels = this.#currentVideoInfo.channels;\n      }\n      state.isStreaming = this.#currentVideoInfo.isLive;\n      if (this.#currentVideoInfo.isLive) {\n        state.duration = 0;\n        state.seek = 0;\n      }\n    }\n\n    return state;\n  }\n\n  on(event: string | symbol, listener: (...args: any[]) => void): this;\n  on(event: 'action', listener: (args: ActionEvent) => void): this;\n  on(event: 'error', listener: (args: MPDPlayerError) => void): this;\n  on(event: 'state', listener: (data: { AID: string; current: PlayerState; previous: PlayerState | null; }) => void): this;\n  on(event: any, listener: any): this {\n    super.on(event, listener);\n    return this;\n  }\n}\n"]}