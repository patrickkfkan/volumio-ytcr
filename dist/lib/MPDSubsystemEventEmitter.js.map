{"version":3,"file":"MPDSubsystemEventEmitter.js","sourceRoot":"","sources":["../../src/lib/MPDSubsystemEventEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { MPDApi } from 'mpd-api';\nimport { Logger } from 'yt-cast-receiver';\n\nexport type SubsystemName = 'database' |\n                            'update' |\n                            'stored_playlist' |\n                            'playlist' |\n                            'player' |\n                            'mixer' |\n                            'output' |\n                            'options' |\n                            'partition' |\n                            'sticker' |\n                            'subscription' |\n                            'message' |\n                            'neighbor' |\n                            'mount';\n\ninterface SubsystemEventListener {\n  (event: SubsystemEvent): Promise<void>;\n}\n\ninterface __SubsystemEventListener {\n  once: boolean;\n  callback: SubsystemEventListener;\n}\n\nexport class SubsystemEvent {\n  #name: string;\n  #propagate: boolean;\n\n  constructor(name: string, propagate = true) {\n    this.#name = name;\n    this.#propagate = propagate;\n  }\n\n  stopPropagation() {\n    this.#propagate = false;\n  }\n\n  get propagate(): boolean {\n    return this.#propagate;\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n}\n\nexport default class MPDSubsystemEventEmitter {\n\n  #status: string;\n  #mpdClient: MPDApi.ClientAPI;\n  #logger: Logger;\n  #systemEventListener: (subsystem: SubsystemName) => Promise<void>;\n  #subsystemEventListeners: {[subsystem: string]: __SubsystemEventListener[]};\n\n  constructor(logger: Logger) {\n    this.#logger = logger;\n    this.#status = 'stopped';\n    this.#systemEventListener = this.#handleSystemEvent.bind(this);\n    this.#subsystemEventListeners = {};\n  }\n\n  static instance(mpdClient: MPDApi.ClientAPI, logger: Logger) {\n    const emitter = new MPDSubsystemEventEmitter(logger);\n    emitter.#mpdClient = mpdClient;\n    return emitter;\n  }\n\n  enable() {\n    if (this.#status === 'stopped') {\n      this.#mpdClient.on('system', this.#systemEventListener);\n      this.#status = 'running';\n      this.#logger.debug('[ytcr] MPDSubsystemEventEmitter enabled.');\n    }\n  }\n\n  disable() {\n    this.#status = 'stopped';\n    this.#mpdClient.removeListener('system', this.#systemEventListener);\n    this.#logger.debug('[ytcr] MPDSubsystemEventEmitter disabled.');\n  }\n\n  #addSubsystemEventListener(event: SubsystemName, listener: SubsystemEventListener, once = false, prepend = false) {\n    if (!this.#subsystemEventListeners[event]) {\n      this.#subsystemEventListeners[event] = [];\n    }\n    const wrapped = {\n      once,\n      callback: listener\n    };\n    if (prepend) {\n      this.#subsystemEventListeners[event].unshift(wrapped);\n    }\n    else {\n      this.#subsystemEventListeners[event].push(wrapped);\n    }\n  }\n\n  on(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener);\n    return this;\n  }\n\n\n  once(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener, true);\n    return this;\n  }\n\n  off(event: SubsystemName, listener: SubsystemEventListener): this {\n    const listeners = this.#subsystemEventListeners[event];\n    if (!listeners) {\n      return this;\n    }\n\n    this.#subsystemEventListeners[event] = listeners.filter((l) => l.callback !== listener);\n    return this;\n  }\n\n  prependOnceListener(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener, true, true);\n    return this;\n  }\n\n  async #handleSystemEvent(subsystem: SubsystemName) {\n    if (this.#status === 'running') {\n      const listeners = this.#subsystemEventListeners[subsystem];\n      if (!listeners) {\n        return;\n      }\n\n      this.#logger.debug(`[ytcr] MPDSubsystemEventEmitter invoking ${listeners.length} SubsystemEventListener callbacks for: ${subsystem}`);\n\n      for (let i = 0; i < listeners.length; i++) {\n        const l = listeners[i];\n        const event = new SubsystemEvent(subsystem);\n        try {\n          const callbackResult = l.callback(event);\n          if (callbackResult.then !== undefined) {\n            await callbackResult;\n          }\n        }\n        catch (error) {\n          this.#logger.debug('[ytcr] MPDSubsystemEventEmitter handleSystemEvent error:', error);\n        }\n        if (!event.propagate) {\n          this.#logger.debug('[ytcr] SubsystemEvent.propagate: false. Event propagation stopped.');\n          break;\n        }\n      }\n\n      this.#subsystemEventListeners[subsystem] = listeners.filter((l) => !l.once);\n    }\n  }\n}\n"]}