{"version":3,"file":"VideoLoader.js","sourceRoot":"","sources":["../../src/lib/VideoLoader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mFAAqE;AACrE,uDAAyD;AACzD,sEAAoC;AACpC,8EAAmD;AAMnD,mEAAmE;AACnE,MAAM,eAAe,GAAG;IACtB,KAAK,EAAE,IAAI;IACX,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,QAAQ;IACf,KAAK,EAAE,QAAQ;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;CACS,CAAC;AAE5B,MAAM,iBAAiB,GAAG;IACxB,IAAI,EAAE,OAAO;IACb,MAAM,EAAE,KAAK;IACb,OAAO,EAAE,MAAM;CACoB,CAAC;AAgCtC,MAAqB,WAAW;IAI9B,YAAY,MAAc;;QAF1B,sCAAgB;QAGd,uBAAA,IAAI,uBAAW,MAAM,MAAA,CAAC;QACtB,4BAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAMD,KAAK,CAAC,iBAAiB;QACrB,MAAM,4BAAe,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAAY,EAAE,WAAwB;QAClD,MAAM,SAAS,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,CAAgB,CAAC;QAAA,CAAC;QAE9C,MAAM,gBAAgB,GAAG,GAAG,EAAE;YAC5B,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,GAAG,GAAG,+CAA+C,KAAK,CAAC,EAAE,EAAE,CAAC;gBACtE,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC;gBACrC,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9B,UAAU,CAAC,IAAI,GAAG,YAAY,CAAC;gBAC/B,MAAM,UAAU,CAAC;YACnB,CAAC;QACH,CAAC,CAAC;QAEF,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,+BAA+B,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAE9D,MAAM,cAAc,GAAG,CAAC,MAAM,4BAAe,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QAEjF,gBAAgB,EAAE,CAAC;QAEnB,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,KAAK,CAAC,EAAE;YACjB,WAAW,EAAE,IAAI;YACjB,cAAc,EAAE,IAAI;YACpB,0BAA0B,EAAE;gBAC1B,OAAO,EAAE,cAAc;aACxB;YACD,iBAAiB,EAAE,IAAI;YACvB,aAAa,EAAE,IAAI;YACnB,eAAe,EAAE;gBACf,sBAAsB,EAAE;oBACtB,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE,KAAK;oBACZ,gBAAgB,EAAE,IAAI;oBACtB,kBAAkB,EAAE,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,mBAAmB,IAAI,CAAC;iBACvE;aACF;SACK,CAAC;QACT,IAAI,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;YAC9B,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC;QAChD,CAAC;QACD,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;YAC1B,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QACxC,CAAC;QACD,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,KAAK,SAAS,EAAE,CAAC;YACvC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACtC,CAAC;QAED,4DAA4D;QAC5D,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;YACvB,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG;gBAC/B,gBAAgB,EAAE,KAAK;gBACvB,gBAAgB,EAAE,KAAK;gBACvB,wBAAwB,EAAE;oBACxB;wBACE,OAAO,EAAE,OAAO;wBAChB,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,GAAG;qBAC5B;iBACF;aACK,CAAC;QACX,CAAC;aACI,CAAC;YACJ,OAAQ,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAY,EAAE,wBAAwB,CAAC;QAC3E,CAAC;QAED,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC;YACH,sDAAsD;YACtD,mFAAmF;YACnF,mCAAmC;YACnC,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC5D,GAAG,OAAO;gBACV,MAAM,EAAE,IAAI;aACb,CAAQ,CAAC;YACV,gBAAgB,EAAE,CAAC;YAEnB,IAAI,SAAS,GAAqB,IAAI,CAAC;YAEvC,sEAAsE;YACtE,sFAAsF;YAEtF,MAAM,oBAAoB,GAAG,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,4BAA4B,EAAE;gBACtF,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,mBAAmB,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,aAAa,GAAG,oBAAoB,EAAE,qBAAqB,CAAC;YAClE,MAAM,YAAY,GAAG,oBAAoB,EAAE,0BAA0B,CAAC;YAEtE,IAAI,aAAa,EAAE,CAAC;gBAClB,SAAS,GAAG;oBACV,EAAE,EAAE,KAAK,CAAC,EAAE;oBACZ,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;oBACjE,OAAO,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE;oBAC9F,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,sBAAsB,CAAC,MAAM;iBAC9D,CAAC;YACJ,CAAC;iBACI,IAAI,YAAY,EAAE,CAAC;gBACtB,SAAS,GAAG;oBACV,EAAE,EAAE,KAAK,CAAC,EAAE;oBACZ,GAAG,EAAE,SAAS;oBACd,KAAK,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;oBAChE,MAAM,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;oBAClE,KAAK,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE;iBACnG,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,MAAM,IAAI,4BAAS,CAAC,gCAAgC,CAAC,CAAC;YACxD,CAAC;YAED,4FAA4F;YAC5F,oGAAoG;YACpG,IAAI,SAAS,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;gBAChC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;YAC7B,CAAC;iBACI,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;gBAC1B,wFAAwF;gBACxF,sEAAsE;gBACtE,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;YACzB,CAAC;iBACI,CAAC;gBACJ,kEAAkE;gBAClE,wEAAwE;gBACxE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,IAAI,kBAAkB,GAAG,MAAM,uBAAA,IAAI,oEAAyB,MAA7B,IAAI,EAA0B,OAAO,EAAE,GAAG,CAAC,CAAC;YAC3E,gBAAgB,EAAE,CAAC;YAEnB,MAAM,SAAS,GAAG,uBAAA,IAAI,yDAAc,MAAlB,IAAI,EAAe,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAE9E,uBAAuB;YACvB,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,MAAM,uBAAA,IAAI,qEAA0B,MAA9B,IAAI,EAA2B,kBAAkB,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC;YACjK,gBAAgB,EAAE,CAAC;YAEnB,IAAI,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;gBACjE,uDAAuD;gBACvD,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,SAAS,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE,0FAA0F,CAAC,CAAC;gBACpJ,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtB,kBAAkB,GAAG,MAAM,uBAAA,IAAI,oEAAyB,MAA7B,IAAI,EAA0B,OAAO,EAAE,GAAG,CAAC,CAAC;gBACvE,gBAAgB,EAAE,CAAC;gBACnB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,MAAM,uBAAA,IAAI,qEAA0B,MAA9B,IAAI,EAA2B,kBAAkB,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAC/J,gBAAgB,EAAE,CAAC;YACrB,CAAC;YAED,OAAO;gBACL,GAAG,SAAS;gBACZ,MAAM,EAAE,MAAM,IAAI,SAAS;gBAC3B,SAAS;gBACT,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM;gBAC1B,SAAS,EAAE,UAAU,EAAE,GAAG;gBAC1B,QAAQ,EAAE,kBAAkB,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC;gBACrD,OAAO,EAAE,UAAU,EAAE,OAAO,IAAI,SAAS;gBACzC,UAAU,EAAE,UAAU,EAAE,UAAU;gBAClC,QAAQ,EAAE,UAAU,EAAE,QAAQ;gBAC9B,aAAa,EAAE,kBAAkB,CAAC,cAAc,EAAE,OAAO;aAC1D,CAAC;QACJ,CAAC;QACD,OAAO,KAAc,EAAE,CAAC;YACtB,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;gBAC1D,MAAM,KAAK,CAAC;YACd,CAAC;YACD,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC/E,OAAO;gBACL,EAAE,EAAE,KAAK,CAAC,EAAE;gBACZ,MAAM,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAyB;aAC3E,CAAC;QACJ,CAAC;IACH,CAAC;CAyMF;yGAzXC,KAAK;IACH,OAAO,MAAM,CAAC,MAAM,4BAAe,CAAC,WAAW,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;AACpE,CAAC,yCAgLD,KAAK,+CAA0B,OAAY,EAAE,GAAW;IACtD,MAAM,SAAS,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,CAAgB,CAAC;IAC7C,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,OAAO,gCAAgC,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,YAAY,CAAC,CAAC;IACvJ,MAAM,cAAc,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAQ,CAAC;IAClF,OAAO,IAAI,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAE,cAAc,CAAE,EAAE,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACnF,CAAC,0CAED,KAAK,gDAA2B,SAA6B,EAAE,SAAoB,EAAE,cAAsB,EAAE,WAAwB,EAAE,UAAsB,EAAE,iBAAiB,GAAG,CAAC;IAClL,uBAAuB;IACvB,MAAM,MAAM,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC;IAC9C,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,UAAU,GAAG,IAAI,CAAC;IACtB,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,SAAS,CAAC,kBAAkB,EAAE,MAAM,KAAK,YAAY,EAAE,CAAC;QAC1D,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1B,MAAM,WAAW,GAAG,SAAS,CAAC,cAAc,EAAE,CAAC;YAC/C,IAAI,WAAW,EAAE,CAAC;gBAChB,UAAU,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,EAAe,WAAW,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;aACI,CAAC;YACJ,MAAM,GAAG,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC;QAC/C,CAAC;IACH,CAAC;SACI,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,UAAU,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,EAAe,SAAS,CAAC,CAAC;IACnD,CAAC;SACI,IAAI,SAAS,CAAC,cAAc,EAAE,gBAAgB,EAAE,CAAC;QACpD,MAAM,aAAa,GAAG,wBAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAC/D,UAAU,GAAG;YACX,GAAG,EAAE,MAAM,uBAAA,IAAI,gEAAqB,MAAzB,IAAI,EAAsB,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,aAAa,CAAC;SAC/F,CAAC;IACJ,CAAC;IAED,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,GAAG,CAAC;IAE7B,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACzB,MAAM,GAAG,wBAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;IACjD,CAAC;IAED,UAAU,EAAE,CAAC;IAEb,WAAW;IACX,IAAI,UAAU,EAAE,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,qEAAqE;YACrE,wFAAwF;YACxF,mEAAmE;YAEnE,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;YAC/C,UAAU,CAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACrC,CAAC;QACD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACvC,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,4BAA4B,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;QACpF,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,gBAAgB,GAAG,MAAM,uBAAA,IAAI,iDAAM,MAAV,IAAI,EAAO,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QACrE,OAAO,CAAC,gBAAgB,CAAC,EAAE,IAAI,KAAK,GAAG,iBAAiB,EAAE,CAAC;YACzD,UAAU,EAAE,CAAC;YACb,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,+BAA+B,gBAAgB,CAAC,MAAM,MAAM,gBAAgB,CAAC,UAAU,yBAAyB,CAAC,CAAC;YACpJ,MAAM,uBAAA,IAAI,kDAAO,MAAX,IAAI,EAAQ,IAAI,CAAC,CAAC;YACxB,KAAK,EAAE,CAAC;YACR,gBAAgB,GAAG,MAAM,uBAAA,IAAI,iDAAM,MAAV,IAAI,EAAO,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACrC,MAAM,SAAS,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;QAC/C,IAAI,KAAK,KAAK,iBAAiB,EAAE,CAAC;YAChC,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,oCAAoC,UAAU,CAAC,GAAG,cAAc,KAAK,aAAa,SAAS,KAAK,CAAC,CAAC;QACtI,CAAC;aACI,CAAC;YACJ,SAAS,GAAG,IAAI,CAAC;YACjB,uBAAA,IAAI,2BAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,yBAAyB,SAAS,IAAI,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,SAAS;QACT,MAAM,EAAE,MAAM;KACf,CAAA;AACH,CAAC,iEAEa,IAAS;IACrB,MAAM,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;IAC3B,IAAI,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,OAAO,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC,8BAED,KAAK,oCAAe,SAA6B;IAC/C,MAAM,SAAS,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,CAAgB,CAAC;IAC7C,MAAM,eAAe,GAAG;QACtB,GAAG,iBAAiB;KACrB,CAAC;IACF,MAAM,QAAQ,GAAG,wBAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,QAAQ,IAAI,wBAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACjE,IAAI,UAAU,EAAE,CAAC;QACf,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACtD,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,CAAC;IACD,IAAI,MAAM,CAAC;IACX,IAAI,CAAC;QACH,MAAM,GAAG,SAAS,EAAE,YAAY,CAAC,eAAe,CAAC,CAAC;IACpD,CAAC;IACD,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC;YAC5B,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,0EAA0E,CAAC,CAAC;YAC/F,IAAI,CAAC;gBACH,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;YACrD,CAAC;YACD,OAAO,KAAK,EAAE,CAAC;gBACb,uBAAA,IAAI,2BAAQ,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;gBACnE,MAAM,GAAG,IAAI,CAAC;YAChB,CAAC;QACH,CAAC;aACI,CAAC;YACJ,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAClF,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,GAAG,EAAE,SAAS,EAAY,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3E,IAAI,UAAU,EAAE,CAAC;QACf,OAAO,uBAAA,IAAI,4DAAiB,MAArB,IAAI,EAAkB,UAAU,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,uEAEgB,IAAY;IAC3B,MAAM,YAAY,GAAG,eAAe,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAErD,OAAO;QACL,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI;QACrB,QAAQ,EAAE,IAAI,CAAC,SAAS;QACxB,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC,IAAI;QACrD,UAAU,EAAE,IAAI,CAAC,iBAAiB;QAClC,QAAQ,EAAE,IAAI,CAAC,cAAc;KAC9B,CAAC;AACJ,CAAC,qCAED,KAAK,2CAAsB,WAAmB,EAAE,aAAsB;IACpE,IAAI,CAAC,aAAa,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC/C,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,CAAC;IACrC,MAAM,gBAAgB,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;IAE1C,2BAA2B;IAC3B,MAAM,KAAK,GAAG,uDAAuD,CAAC;IAEtE,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAE5B,6CAA6C;IAC7C,IAAI,CAAC,CAAC;IACN,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;QACnD,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,EAAE,CAAC;YAChC,KAAK,CAAC,SAAS,EAAE,CAAC;QACpB,CAAC;QAED,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE/B,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;YAC9B,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC,CAAC,aAAa;gBACnC,OAAO,CAAC,OAAO,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC9C,CAAC;YACD,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;gBACrB,OAAO,CAAC,GAAG,GAAG,KAAK,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wEAAwE;IACxE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC/C,OAAO;QACP,YAAY,EAAE,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;KAC3D,CAAC,CAAC,CAAC;IACJ,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhH,OAAO,OAAO,EAAE,OAAO,CAAC,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC;AAClE,CAAC,mDAEM,EAAU;IACf,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC,sBAED,KAAK,4BAAO,GAAW,EAAE,MAAoB;IAC3C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IACzD,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,UAAU,EAAE,GAAG,CAAC,UAAU;KAC3B,CAAC;AACJ,CAAC;kBAjYkB,WAAW","sourcesContent":["import * as InnertubeLib from 'volumio-yt-support/dist/innertube.js';\nimport { DataError, type Video } from 'yt-cast-receiver';\nimport ytcr from './YTCRContext.js';\nimport InnertubeLoader from './InnertubeLoader.js';\nimport type Logger from './Logger.js';\n\ntype InnertubeVideoInfo = InnertubeLib.YT.VideoInfo;\ntype Format = InnertubeLib.Misc.Format;\n\n// https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2\nconst ITAG_TO_BITRATE = {\n  '139': '48',\n  '140': '128',\n  '141': '256',\n  '171': '128',\n  '249': 'VBR 50',\n  '250': 'VBR 70',\n  '251': 'VBR 160',\n  '774': 'VBR 256'\n} as Record<string, string>;\n\nconst BEST_AUDIO_FORMAT = {\n  type: 'audio',\n  format: 'any',\n  quality: 'best'\n} as InnertubeLib.Types.FormatOptions;\n\ninterface BasicInfo {\n  id: string;\n  src?: 'yt' | 'ytmusic';\n  title?: string;\n  channel?: string;\n  artist?: string;\n  album?: string;\n  isLive?: boolean;\n}\n\nexport interface VideoInfo extends BasicInfo {\n  errMsg?: string;\n  thumbnail?: string;\n  isLive?: boolean;\n  streamUrl?: string | null;\n  duration?: number;\n  bitrate?: string;\n  samplerate?: number;\n  channels?: number;\n  streamExpires?: Date;\n}\n\ninterface StreamInfo {\n  url: string | null;\n  mimeType?: string;\n  bitrate?: string | null;\n  sampleRate?: number;\n  channels?: number;\n}\n\nexport default class VideoLoader {\n\n  #logger: Logger;\n\n  constructor(logger: Logger) {\n    this.#logger = logger;\n    InnertubeLoader.setLogger(logger);\n  }\n\n  async #getInnertube() {\n    return await (await InnertubeLoader.getInstance()).getInnertube();\n  }\n\n  async refreshI18nConfig() {\n    await InnertubeLoader.applyI18nConfig();\n  }\n\n  async getInfo(video: Video, abortSignal: AbortSignal): Promise<VideoInfo> {\n    const innertube = await this.#getInnertube();;\n    \n    const checkAbortSignal = () => {\n      if (abortSignal.aborted) {\n        const msg = `VideoLoader.getInfo() aborted for video Id: ${video.id}`;\n        this.#logger.debug(`[ytcr] ${msg}.`);\n        const abortError = Error(msg);\n        abortError.name = 'AbortError';\n        throw abortError;\n      }\n    };\n\n    this.#logger.debug(`[ytcr] VideoLoader.getInfo: ${video.id}`);\n\n    const contentPoToken = (await InnertubeLoader.generatePoToken(video.id)).poToken;\n\n    checkAbortSignal();\n\n    const payload = {\n      videoId: video.id,\n      racyCheckOk: true,\n      contentCheckOk: true,\n      serviceIntegrityDimensions: {\n        poToken: contentPoToken\n      },\n      enableMdxAutoplay: true,\n      isMdxPlayback: true,\n      playbackContext: {\n        contentPlaybackContext: {\n          vis: 0,\n          splay: false,\n          lactMilliseconds: '-1',\n          signatureTimestamp: innertube.session.player?.signature_timestamp || 0\n        }\n      }\n    } as any;\n    if (video.context?.playlistId) {\n      payload.playlistId = video.context.playlistId;\n    }\n    if (video.context?.params) {\n      payload.params = video.context.params;\n    }\n    if (video.context?.index !== undefined) {\n      payload.index = video.context.index;\n    }\n\n    // Modify innertube's session context to include `ctt` param\n    if (video.context?.ctt) {\n      innertube.session.context.user = {\n        enableSafetyMode: false,\n        lockedSafetyMode: false,\n        credentialTransferTokens: [\n          {\n            'scope': 'VIDEO',\n            'token': video.context?.ctt\n          }\n        ]\n      } as any;\n    }\n    else {\n      delete (innertube.session.context.user as any)?.credentialTransferTokens;\n    }\n\n    const cpn = InnertubeLib.Utils.generateRandomString(16);\n\n    try {\n      // There are two endpoints we need to fetch data from:\n      // 1. '/next': for metadata (title, channel for video, artist / album for music...)\n      // 2. '/player': for streaming data\n      const nextResponse = await innertube.actions.execute('/next', {\n        ...payload,\n        client: 'TV'\n      }) as any;\n      checkAbortSignal();\n\n      let basicInfo: BasicInfo | null = null;\n\n      // We cannot use innertube to parse `nextResponse`, because it doesn't\n      // Have `SingleColumnWatchNextResults` parser class. We would have to do it ourselves.\n\n      const singleColumnContents = nextResponse.data?.contents?.singleColumnWatchNextResults?.\n        results?.results?.contents?.[0]?.itemSectionRenderer?.contents?.[0];\n\n      const videoMetadata = singleColumnContents?.videoMetadataRenderer;\n      const songMetadata = singleColumnContents?.musicWatchMetadataRenderer;\n\n      if (videoMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'yt',\n          title: new InnertubeLib.Misc.Text(videoMetadata.title).toString(),\n          channel: new InnertubeLib.Misc.Text(videoMetadata.owner?.videoOwnerRenderer?.title).toString(),\n          isLive: videoMetadata.viewCount.videoViewCountRenderer.isLive\n        };\n      }\n      else if (songMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'ytmusic',\n          title: new InnertubeLib.Misc.Text(songMetadata.title).toString(),\n          artist: new InnertubeLib.Misc.Text(songMetadata.byline).toString(),\n          album: songMetadata.albumName ? new InnertubeLib.Misc.Text(songMetadata.albumName).toString() : ''\n        };\n      }\n\n      if (!basicInfo) {\n        throw new DataError('Metadata not found in response');\n      }\n\n      // Fetch response from '/player' endpoint. But first, decide on the Innertube client to use.\n      // Setting payload.client will cause Innertube to modify 'context.client' before submitting request.\n      if (basicInfo.src === 'ytmusic') {\n        payload.client = 'YTMUSIC';\n      }\n      else if (basicInfo.isLive) {\n        // Do not use TV client for live streams, because it will only return DASH manifest URL.\n        // Use default WEB client instead, which will return HLS manifest URL.\n        payload.client = 'WEB';\n      }\n      else {\n        // Use TV client for regular videos. TV_EMBEDDED should also work.\n        // Anything else will likely give stream URLs that return 403 Forbidden.\n        payload.client = 'TV';\n      }\n      \n      let innertubeVideoInfo = await this.#fetchInnertubeVideoInfo(payload, cpn);\n      checkAbortSignal();\n\n      const thumbnail = this.#getThumbnail(innertubeVideoInfo.basic_info.thumbnail);\n\n      // Retrieve stream info\n      let { info: streamInfo, validated, errMsg } = await this.#getAndValidateStreamInfo(innertubeVideoInfo, basicInfo, contentPoToken, abortSignal, checkAbortSignal);\n      checkAbortSignal();\n\n      if (streamInfo?.url && !validated && basicInfo.src === 'ytmusic') {\n        // YTMUSIC client didn't work out; retry with TV client\n        this.#logger.info(`[ytcr] (${basicInfo.title || video.id}) failed to validate stream URL obtained with YTMUSIC client; retrying with TV client...`);\n        payload.client = 'TV';\n        innertubeVideoInfo = await this.#fetchInnertubeVideoInfo(payload, cpn);\n        checkAbortSignal();\n        ({ info: streamInfo, validated, errMsg } = await this.#getAndValidateStreamInfo(innertubeVideoInfo, basicInfo, contentPoToken, abortSignal, checkAbortSignal));\n        checkAbortSignal();\n      }\n\n      return {\n        ...basicInfo,\n        errMsg: errMsg || undefined,\n        thumbnail,\n        isLive: !!basicInfo.isLive,\n        streamUrl: streamInfo?.url,\n        duration: innertubeVideoInfo.basic_info.duration || 0,\n        bitrate: streamInfo?.bitrate || undefined,\n        samplerate: streamInfo?.sampleRate,\n        channels: streamInfo?.channels,\n        streamExpires: innertubeVideoInfo.streaming_data?.expires\n      };\n    }\n    catch (error: unknown) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw error;\n      }\n      this.#logger.error(`[ytcr] Error in VideoLoader.getInfo(${video.id}):`, error);\n      return {\n        id: video.id,\n        errMsg: error instanceof Error ? error.message : '(Check logs for errors)'\n      };\n    }\n  }\n\n  async #fetchInnertubeVideoInfo(payload: any, cpn: string) {\n    const innertube = await this.#getInnertube();\n    this.#logger.info(`[ytcr] (${payload.videoId}) fetching player data using ${payload.client || innertube.session.context.client.clientName} client...`);\n    const playerResponse = await innertube.actions.execute('/player', payload) as any;\n    return new InnertubeLib.YT.VideoInfo([ playerResponse ], innertube.actions, cpn);\n  }\n\n  async #getAndValidateStreamInfo(videoInfo: InnertubeVideoInfo, basicInfo: BasicInfo, contentPoToken: string, abortSignal: AbortSignal, checkAbort: () => void, validationRetries = 3) {\n    // Retrieve stream info\n    const isLive = !!videoInfo.basic_info.is_live;\n    let playable = false;\n    let errMsg = null;\n    let streamInfo = null;\n    let validated = false;\n    if (videoInfo.playability_status?.status === 'UNPLAYABLE') {\n      if (videoInfo.has_trailer) {\n        const trailerInfo = videoInfo.getTrailerInfo();\n        if (trailerInfo) {\n          streamInfo = await this.#chooseFormat(trailerInfo);\n        }\n      }\n      else {\n        errMsg = videoInfo.playability_status.reason;\n      }\n    }\n    else if (!isLive) {\n      streamInfo = await this.#chooseFormat(videoInfo);\n    }\n    else if (videoInfo.streaming_data?.hls_manifest_url) {\n      const targetQuality = ytcr.getConfigValue('liveStreamQuality');\n      streamInfo = {\n        url: await this.#getStreamUrlFromHLS(videoInfo.streaming_data.hls_manifest_url, targetQuality)\n      };\n    }\n\n    playable = !!streamInfo?.url;\n\n    if (!playable && !errMsg) {\n      errMsg = ytcr.getI18n('YTCR_STREAM_NOT_FOUND');\n    }\n\n    checkAbort();\n    \n    // Validate\n    if (streamInfo?.url) {\n      if (!isLive) {\n        // Innertube sets `pot` searchParam of URL to session-bound PO token.\n        // Seems YT now requires `pot` to be the *content-bound* token, otherwise we'll get 403.\n        // See: https://github.com/TeamNewPipe/NewPipeExtractor/issues/1392\n        \n        const urlObj = new URL(streamInfo.url);\n        urlObj.searchParams.set('pot', contentPoToken);\n        streamInfo.url = urlObj.toString();\n      }\n      const title = basicInfo.title || basicInfo.id;\n      const startTime = new Date().getTime();\n      this.#logger.info(`[ytcr] (${title}) validating stream URL \"${streamInfo.url}\"...`);\n      let tries = 0;\n      let testStreamResult = await this.#head(streamInfo.url, abortSignal);\n      while (!testStreamResult.ok && tries < validationRetries) {\n        checkAbort();\n        this.#logger.warn(`[ytcr] (${title}) stream validation failed (${testStreamResult.status} - ${testStreamResult.statusText}); retrying after 2s...`);\n        await this.#sleep(2000);\n        tries++;\n        testStreamResult = await this.#head(streamInfo.url, abortSignal);\n      }\n      const endTime = new Date().getTime();\n      const timeTaken = (endTime - startTime) / 1000;\n      if (tries === validationRetries) {\n        this.#logger.warn(`[ytcr] (${title}) failed to validate stream URL \"${streamInfo.url}\" (retried ${tries} times in ${timeTaken}s).`);\n      }\n      else {\n        validated = true;\n        this.#logger.info(`[ytcr] (${title}) stream validated in ${timeTaken}s.`);\n      }\n    }\n\n    return {\n      info: streamInfo,\n      validated,\n      errMsg: errMsg\n    }\n  }\n\n  #getThumbnail(data: any): string {\n    const url = data?.[0]?.url;\n    if (url?.startsWith('//')) {\n      return `https:${url}`;\n    }\n    return url;\n  }\n\n  async #chooseFormat(videoInfo: InnertubeVideoInfo): Promise<StreamInfo | null> {  \n    const innertube = await this.#getInnertube();\n    const preferredFormat = {\n      ...BEST_AUDIO_FORMAT\n    };\n    const prefetch = ytcr.getConfigValue('prefetch');\n    const preferOpus = prefetch && ytcr.getConfigValue('preferOpus');\n    if (preferOpus) {\n      this.#logger.debug('[ytcr] Preferred format is Opus');\n      preferredFormat.format = 'opus';\n    }\n    let format;\n    try {\n      format = videoInfo?.chooseFormat(preferredFormat);\n    }\n    catch (error) {\n      if (preferOpus && videoInfo) {\n        this.#logger.debug('[ytcr] No matching format for Opus. Falling back to any audio format ...');\n        try {\n          format = videoInfo.chooseFormat(BEST_AUDIO_FORMAT);\n        }\n        catch (error) {\n          this.#logger.debug('[ytcr] Failed to obtain audio format:', error);\n          format = null;\n        }\n      }\n      else {\n        throw error;\n      }\n    }\n\n    const streamUrl = format ? await format.decipher(innertube.session.player) : null;\n    const streamData = format ? { ...format, url: streamUrl } as Format : null;\n    if (streamData) {\n      return this.#parseStreamData(streamData);\n    }\n    return null;\n  }\n\n  #parseStreamData(data: Format): StreamInfo {\n    const audioBitrate = ITAG_TO_BITRATE[`${data.itag}`];\n\n    return {\n      url: data.url || null,\n      mimeType: data.mime_type,\n      bitrate: audioBitrate ? `${audioBitrate} kbps` : null,\n      sampleRate: data.audio_sample_rate,\n      channels: data.audio_channels\n    };\n  }\n\n  async #getStreamUrlFromHLS(manifestUrl: string, targetQuality?: string): Promise<string | null> {\n    if (!targetQuality || targetQuality === 'auto') {\n      return manifestUrl;\n    }\n\n    const res = await fetch(manifestUrl);\n    const manifestContents = await res.text();\n\n    // Match Resolution and Url\n    const regex = /#EXT-X-STREAM-INF.*RESOLUTION=(\\d+x\\d+).*[\\r\\n](.+)/gm;\n\n    const playlistVariants = [];\n\n    // Modified from regex101's code generator :)\n    let m;\n    while ((m = regex.exec(manifestContents)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      const variant: any = {};\n      playlistVariants.push(variant);\n\n      m.forEach((match, groupIndex) => {\n        if (groupIndex === 1) { // Resolution\n          variant.quality = `${match.split('x')[1]}p`;\n        }\n        if (groupIndex === 2) {\n          variant.url = match;\n        }\n      });\n    }\n\n    // Find matching variant or closest one that is lower than targetQuality\n    const targetQualityInt = parseInt(targetQuality);\n    const diffs = playlistVariants.map((variant) => ({\n      variant,\n      qualityDelta: targetQualityInt - parseInt(variant.quality)\n    }));\n    const closest = diffs.filter((v) => v.qualityDelta >= 0).sort((v1, v2) => v1.qualityDelta - v2.qualityDelta)[0];\n\n    return closest?.variant.url || playlistVariants[0]?.url || null;\n  }\n\n  #sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async #head(url: string, signal?: AbortSignal) {\n    const res = await fetch(url, { method: 'HEAD', signal });\n    return {\n      ok: res.ok,\n      status: res.status,\n      statusText: res.statusText\n    };\n  }\n}\n"]}