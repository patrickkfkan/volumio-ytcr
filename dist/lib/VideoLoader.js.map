{"version":3,"file":"VideoLoader.js","sourceRoot":"","sources":["../../src/lib/VideoLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import Innertube, * as InnertubeLib from 'volumio-youtubei.js';\nimport { VideoInfo as InnertubeVideoInfo } from 'volumio-youtubei.js/dist/src/parser/youtube/index.js';\nimport Format from 'volumio-youtubei.js/dist/src/parser/classes/misc/Format.js';\nimport { DataError, Logger, Video } from 'yt-cast-receiver';\nimport { AbortSignal } from 'abort-controller';\nimport fetch from 'node-fetch';\nimport ytcr from './YTCRContext.js';\n\n// https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2\nconst ITAG_TO_BITRATE = {\n  '139': '48',\n  '140': '128',\n  '141': '256',\n  '171': '128',\n  '249': '50',\n  '250': '70',\n  '251': '160'\n} as Record<string, string>;\n\nconst BEST_AUDIO_FORMAT = {\n  type: 'audio',\n  format: 'any',\n  quality: 'best'\n} as InnertubeLib.FormatOptions;\n\ninterface BasicInfo {\n  id: string;\n  src?: 'yt' | 'ytmusic';\n  title?: string;\n  channel?: string;\n  artist?: string;\n  album?: string;\n}\n\nexport interface VideoInfo extends BasicInfo {\n  errMsg?: string;\n  thumbnail?: string;\n  isLive?: boolean;\n  streamUrl?: string | null;\n  bitrate?: string;\n  samplerate?: number;\n  channels?: number;\n}\n\ninterface StreamInfo {\n  url: string | null;\n  mimeType?: string;\n  bitrate?: string | null;\n  sampleRate?: number;\n  channels?: number;\n}\n\nexport default class VideoLoader {\n\n  #innertube: Innertube | null;\n  #logger: Logger;\n  #innertubeInitialClient: InnertubeLib.Context['client'];\n  #innertubeTVClient: InnertubeLib.Context['client'];\n\n  constructor(logger: Logger) {\n    this.#innertube = null;\n    this.#logger = logger;\n  }\n\n  async #init() {\n    if (!this.#innertube) {\n      this.#innertube = await Innertube.create();\n      this.#innertubeInitialClient = {...this.#innertube.session.context.client};\n      this.#innertubeTVClient = {\n        ...this.#innertube.session.context.client,\n        clientName: 'TVHTML5',\n        clientVersion: '7.20230405.08.01',\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36; SMART-TV; Tizen 4.0,gzip(gfe)'\n      };\n    }\n  }\n\n  async getInfo(video: Video, abortSignal: AbortSignal): Promise<VideoInfo> {\n    if (!this.#innertube) {\n      await this.#init();\n    }\n    if (!this.#innertube) {\n      throw Error('VideoLoader not initialized');\n    }\n\n    this.#logger.debug(`[ytcr] VideoLoader.getInfo: ${video.id}`);\n\n    if (abortSignal) {\n      abortSignal.onabort = () => {\n        const abortError = Error(`VideoLoader.getInfo() aborted for video Id: ${video.id}`);\n        abortError.name = 'AbortError';\n        throw abortError;\n      };\n    }\n\n    const cpn = InnertubeLib.Utils.generateRandomString(16);\n\n    // Prepare request payload\n    const payload = {\n      videoId: video.id,\n      enableMdxAutoplay: true,\n      isMdxPlayback: true,\n      playbackContext: {\n        contentPlaybackContext: {\n          signatureTimestamp: this.#innertube.session.player?.sts || 0\n        }\n      }\n    } as any;\n    if (video.context?.playlistId) {\n      payload.playlistId = video.context.playlistId;\n    }\n    if (video.context?.params) {\n      payload.params = video.context.params;\n    }\n    if (video.context?.index !== undefined) {\n      payload.index = video.context.index;\n    }\n\n    // We are requesting data as a 'TV' client\n    this.#innertube.session.context.client = this.#innertubeTVClient;\n\n    // Modify innertube's session context to include `ctt` param\n    if (video.context?.ctt) {\n      this.#innertube.session.context.user = {\n        enableSafetyMode: false,\n        lockedSafetyMode: false,\n        credentialTransferTokens: [\n          {\n            'scope': 'VIDEO',\n            'token': video.context?.ctt\n          }\n        ]\n      } as any;\n    }\n    else {\n      delete (this.#innertube.session.context.user as any)?.credentialTransferTokens;\n    }\n\n    try {\n      // There are two endpoints we need to fetch data from:\n      // 1. '/next': for metadata (title, channel for video, artist / album for music...)\n      // 2. '/player': for streaming data\n\n      const nextResponse = await this.#innertube.actions.execute('/next', payload) as any;\n\n      let basicInfo: BasicInfo | null = null;\n\n      // We cannot use innertube to parse `nextResponse`, because it doesn't\n      // Have `SingleColumnWatchNextResults` parser class. We would have to do it ourselves.\n\n      const singleColumnContents = nextResponse.data?.contents?.singleColumnWatchNextResults?.\n        results?.results?.contents?.[0]?.itemSectionRenderer?.contents?.[0];\n\n      const videoMetadata = singleColumnContents?.videoMetadataRenderer;\n      const songMetadata = singleColumnContents?.musicWatchMetadataRenderer;\n\n      if (videoMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'yt',\n          title: new InnertubeLib.Misc.Text(videoMetadata.title).toString(),\n          channel: new InnertubeLib.Misc.Text(videoMetadata.owner?.videoOwnerRenderer?.title).toString()\n        };\n      }\n      else if (songMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'ytmusic',\n          title: new InnertubeLib.Misc.Text(songMetadata.title).toString(),\n          artist: new InnertubeLib.Misc.Text(songMetadata.byline).toString(),\n          album: songMetadata.albumName ? new InnertubeLib.Misc.Text(songMetadata.albumName).toString() : ''\n        };\n      }\n\n      if (!basicInfo) {\n        throw new DataError('Metadata not found in response');\n      }\n\n      // Fetch response from '/player' endpoint.\n      // But first revert to initial client in innertube context, otherwise livestreams will only have DASH manifest URL\n      // - what we need is the HLS manifest URL\n      this.#innertube.session.context.client = {...this.#innertubeInitialClient};\n      if (basicInfo.src === 'ytmusic') {\n        // For YouTube Music, it is also necessary to set `payload.client` to 'YTMUSIC'. Innertube will modify\n        // `context.client` with YouTube Music client info before submitting it to the '/player' endpoint.\n        payload.client = 'YTMUSIC';\n      }\n      const playerResponse = await this.#innertube.actions.execute('/player', payload) as any;\n\n      // Wrap it in innertube VideoInfo.\n      const innertubeVideoInfo = new InnertubeLib.YT.VideoInfo([ playerResponse ], this.#innertube.actions, this.#innertube.session.player, cpn);\n\n      const thumbnail = this.#getThumbnail(innertubeVideoInfo.basic_info.thumbnail);\n      const isLive = !!innertubeVideoInfo.basic_info.is_live;\n\n      // Retrieve stream info\n      let playable = false;\n      let errMsg = null;\n      let streamInfo = null;\n      if (innertubeVideoInfo.playability_status.status === 'UNPLAYABLE') {\n        if (innertubeVideoInfo.has_trailer) {\n          const trailerInfo = innertubeVideoInfo.getTrailerInfo();\n          if (trailerInfo) {\n            streamInfo = this.#chooseFormat(trailerInfo);\n          }\n        }\n        else {\n          errMsg = innertubeVideoInfo.playability_status.reason;\n        }\n      }\n      else if (!isLive) {\n        streamInfo = this.#chooseFormat(innertubeVideoInfo);\n      }\n      else if (innertubeVideoInfo.streaming_data?.hls_manifest_url) {\n        const targetQuality = ytcr.getConfigValue('liveStreamQuality', 'auto');\n        streamInfo = {\n          url: await this.#getStreamUrlFromHLS(innertubeVideoInfo.streaming_data.hls_manifest_url, targetQuality)\n        };\n      }\n\n      playable = !!streamInfo?.url;\n\n      if (!playable && !errMsg) {\n        errMsg = ytcr.getI18n('YTCR_STREAM_NOT_FOUND');\n      }\n\n      return {\n        ...basicInfo,\n        errMsg: errMsg || undefined,\n        thumbnail,\n        isLive,\n        streamUrl: streamInfo?.url,\n        bitrate: streamInfo?.bitrate || undefined,\n        samplerate: streamInfo?.sampleRate,\n        channels: streamInfo?.channels\n      };\n\n    }\n    catch (error) {\n      this.#logger.error(`[ytcr] Error in VideoLoader.getInfo(${video.id}):`, error);\n      return {\n        id: video.id,\n        errMsg: error instanceof Error ? error.message : '(Check logs for errors)'\n      };\n    }\n  }\n\n  #getThumbnail(data: any): string {\n    const url = data?.[0]?.url;\n    if (url?.startsWith('//')) {\n      return `https:${url}`;\n    }\n    return url;\n  }\n\n  #chooseFormat(videoInfo: InnertubeVideoInfo) {\n    if (!this.#innertube) {\n      throw Error('VideoLoader not initialized');\n    }\n    const format = videoInfo?.chooseFormat(BEST_AUDIO_FORMAT);\n    const streamUrl = format ? format.decipher(this.#innertube.session.player) : null;\n    const streamData = format ? { ...format, url: streamUrl } as Format : null;\n    if (streamData) {\n      return this.#parseStreamData(streamData);\n    }\n    return null;\n  }\n\n  #parseStreamData(data: Format): StreamInfo {\n    const audioBitrate = ITAG_TO_BITRATE[`${data.itag}`];\n\n    return {\n      url: data.url,\n      mimeType: data.mime_type,\n      bitrate: audioBitrate ? `${audioBitrate} kbps` : null,\n      sampleRate: data.audio_sample_rate,\n      channels: data.audio_channels\n    };\n  }\n\n  async #getStreamUrlFromHLS(manifestUrl: string, targetQuality?: string): Promise<string | null> {\n    if (!targetQuality || targetQuality === 'auto') {\n      return manifestUrl;\n    }\n\n    const res = await fetch(manifestUrl);\n    const manifestContents = await res.text();\n\n    // Match Resolution and Url\n    const regex = /#EXT-X-STREAM-INF.*RESOLUTION=(\\d+x\\d+).*[\\r\\n](.+)/gm;\n\n    const playlistVariants = [];\n\n    // Modified from regex101's code generator :)\n    let m;\n    while ((m = regex.exec(manifestContents)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      const variant: any = {};\n      playlistVariants.push(variant);\n\n      m.forEach((match, groupIndex) => {\n        if (groupIndex === 1) { // Resolution\n          variant.quality = `${match.split('x')[1]}p`;\n        }\n        if (groupIndex === 2) {\n          variant.url = match;\n        }\n      });\n    }\n\n    // Find matching variant or closest one that is lower than targetQuality\n    const targetQualityInt = parseInt(targetQuality);\n    const diffs = playlistVariants.map((variant) => ({\n      variant,\n      qualityDelta: targetQualityInt - parseInt(variant.quality)\n    }));\n    const closest = diffs.filter((v) => v.qualityDelta >= 0).sort((v1, v2) => v1.qualityDelta - v2.qualityDelta)[0];\n\n    return closest?.variant.url || playlistVariants[0]?.url || null;\n  }\n}\n"]}