{"version":3,"file":"ReceiverDataStore.js","sourceRoot":"","sources":["../../src/lib/ReceiverDataStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,uDAA6C;AAC7C,gEAAiC;AAEjC,MAAM,UAAU,GAAG,kBAAkB,CAAC;AACtC,MAAM,GAAG,GAAG,OAAO,CAAC;AAEpB,MAAqB,iBAAkB,SAAQ,4BAAS;IAItD;QACE,KAAK,EAAE,CAAC;;QAHV,oDAAuC;QAIrC,uBAAA,IAAI,qCAAmB,IAAI,MAAA,CAAC;IAC9B,CAAC;IAED,6EAA6E;IAC7E,GAAG,CAAI,GAAW,EAAE,KAAQ;QAC1B,MAAM,MAAM,GAAG,qBAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,qBAAI,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACxC,uBAAA,IAAI,0EAAmB,MAAvB,IAAI,CAAqB,CAAC;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,GAAG,CAAI,GAAW;QAChB,MAAM,MAAM,GAAG,qBAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK;QACH,qBAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;CAYF;;IATG,IAAI,uBAAA,IAAI,yCAAgB,EAAE,CAAC;QACzB,YAAY,CAAC,uBAAA,IAAI,yCAAgB,CAAC,CAAC;QACnC,uBAAA,IAAI,qCAAmB,IAAI,MAAA,CAAC;IAC9B,CAAC;IACD,uBAAA,IAAI,qCAAmB,UAAU,CAAC,GAAG,EAAE;QACrC,qBAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,uBAAA,IAAI,qCAAmB,IAAI,MAAA,CAAC;IAC9B,CAAC,EAAE,GAAG,CAAC,MAAA,CAAC;AACV,CAAC;kBApCkB,iBAAiB","sourcesContent":["import { DataStore } from 'yt-cast-receiver';\nimport ytcr from './YTCRContext';\n\nconst BUNDLE_KEY = 'yt-cast-receiver';\nconst TTL = 3600000;\n\nexport default class ReceiverDataStore extends DataStore {\n\n  #markDirtyTimer: NodeJS.Timeout | null;\n\n  constructor() {\n    super();\n    this.#markDirtyTimer = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\n  set<T>(key: string, value: T): Promise<void> {\n    const bundle = ytcr.getConfigValue(BUNDLE_KEY);\n    bundle[key] = value;\n    ytcr.setConfigValue(BUNDLE_KEY, bundle);\n    this.#setMarkDirtyTimer();\n    return Promise.resolve();\n  }\n\n  get<T>(key: string): Promise<T | null> {\n    const bundle = ytcr.getConfigValue(BUNDLE_KEY);\n    return Promise.resolve(bundle[key] || null);\n  }\n\n  clear() {\n    ytcr.deleteConfigValue(BUNDLE_KEY);\n  }\n\n  #setMarkDirtyTimer() {\n    if (this.#markDirtyTimer) {\n      clearTimeout(this.#markDirtyTimer);\n      this.#markDirtyTimer = null;\n    }\n    this.#markDirtyTimer = setTimeout(() => {\n      ytcr.setConfigValue('dataStoreDirty', true);\n      this.#markDirtyTimer = null;\n    }, TTL);\n  }\n}\n"]}